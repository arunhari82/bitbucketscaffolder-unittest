import { basicIntegrations, defaultScmResolveUrl } from '../helpers.esm.js';
import { readHarnessConfig } from './config.esm.js';
import { getHarnessEditContentsUrl } from './core.esm.js';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, key + "" , value);
  return value;
};
const _HarnessIntegration = class _HarnessIntegration {
  constructor(config) {
    this.config = config;
  }
  get type() {
    return "harness";
  }
  get title() {
    return this.config.host;
  }
  resolveUrl(options) {
    return defaultScmResolveUrl(options);
  }
  resolveEditUrl(url) {
    return getHarnessEditContentsUrl(this.config, url);
  }
};
__publicField(_HarnessIntegration, "factory", ({ config }) => {
  var _a;
  const configs = (_a = config.getOptionalConfigArray("integrations.harness")) != null ? _a : [];
  const harnessConfigs = configs.map((c) => readHarnessConfig(c));
  return basicIntegrations(
    harnessConfigs.map((c) => new _HarnessIntegration(c)),
    (harness) => harness.config.host
  );
});
let HarnessIntegration = _HarnessIntegration;

export { HarnessIntegration };
//# sourceMappingURL=HarnessIntegration.esm.js.map
