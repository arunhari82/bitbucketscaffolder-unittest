function getHarnessEditContentsUrl(config, url) {
  try {
    const baseUrl = `https://${config.host}`;
    const [
      _blank,
      _ng,
      _account,
      accountId,
      _module,
      _moduleName,
      _org,
      orgName,
      _projects,
      projectName,
      _repos,
      repoName,
      _files,
      _ref,
      _branch,
      ...path
    ] = url.replace(baseUrl, "").split("/");
    const pathWithoutSlash = path.join("/").replace(/^\//, "");
    return `${baseUrl}/gateway/code/api/v1/repos/${accountId}/${orgName}/${projectName}/${repoName}/+/edit/${pathWithoutSlash}`;
  } catch (e) {
    throw new Error(`Incorrect URL: ${url}, ${e}`);
  }
}
function getHarnessFileContentsUrl(config, url) {
  try {
    const baseUrl = `https://${config.host}`;
    const [
      _blank,
      _ng,
      _account,
      accountId,
      _module,
      _moduleName,
      _org,
      orgName,
      _projects,
      projectName,
      _repos,
      repoName,
      _files,
      _ref,
      _branch,
      ...path
    ] = url.replace(baseUrl, "").split("/");
    const urlParts = url.replace(baseUrl, "").split("/");
    const refAndPath = urlParts.slice(13);
    const refIndex = refAndPath.findIndex((item) => item === "~");
    const refString = refAndPath.slice(0, refIndex);
    const pathWithoutSlash = path.join("/").replace(/^\//, "");
    return `${baseUrl}/gateway/code/api/v1/repos/${accountId}/${orgName}/${projectName}/${repoName}/+/raw/${pathWithoutSlash}?routingId=${accountId}&git_ref=${refString}`;
  } catch (e) {
    throw new Error(`Incorrect URL: ${url}, ${e}`);
  }
}
function getHarnessRequestOptions(config) {
  const headers = {};
  const { token, apiKey } = config;
  if (apiKey) {
    headers["x-api-key"] = apiKey;
  } else if (token) {
    headers.Authorization = `Bearer ${token}`;
  }
  return {
    headers
  };
}

export { getHarnessEditContentsUrl, getHarnessFileContentsUrl, getHarnessRequestOptions };
//# sourceMappingURL=core.esm.js.map
