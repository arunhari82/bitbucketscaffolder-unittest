import { basicIntegrations, defaultScmResolveUrl } from '../helpers.esm.js';
import { readAwsS3IntegrationConfigs } from './config.esm.js';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, key + "" , value);
  return value;
};
const _AwsS3Integration = class _AwsS3Integration {
  constructor(integrationConfig) {
    this.integrationConfig = integrationConfig;
  }
  get type() {
    return "awsS3";
  }
  get title() {
    return this.integrationConfig.host;
  }
  get config() {
    return this.integrationConfig;
  }
  resolveUrl(options) {
    const resolved = defaultScmResolveUrl(options);
    return resolved;
  }
  resolveEditUrl(url) {
    return url;
  }
};
__publicField(_AwsS3Integration, "factory", ({ config }) => {
  var _a;
  const configs = readAwsS3IntegrationConfigs(
    (_a = config.getOptionalConfigArray("integrations.awsS3")) != null ? _a : []
  );
  return basicIntegrations(
    configs.map((c) => new _AwsS3Integration(c)),
    (i) => i.config.host
  );
});
let AwsS3Integration = _AwsS3Integration;

export { AwsS3Integration };
//# sourceMappingURL=AwsS3Integration.esm.js.map
