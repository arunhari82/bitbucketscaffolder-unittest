import parseGitUrl from 'git-url-parse';
import { basicIntegrations, defaultScmResolveUrl } from '../helpers.esm.js';
import { readBitbucketIntegrationConfigs } from './config.esm.js';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, key + "" , value);
  return value;
};
const _BitbucketIntegration = class _BitbucketIntegration {
  constructor(integrationConfig) {
    this.integrationConfig = integrationConfig;
  }
  get type() {
    return "bitbucket";
  }
  get title() {
    return this.integrationConfig.host;
  }
  get config() {
    return this.integrationConfig;
  }
  resolveUrl(options) {
    const resolved = defaultScmResolveUrl(options);
    if (!options.lineNumber) {
      return resolved;
    }
    const url = new URL(resolved);
    if (this.integrationConfig.host === "bitbucket.org") {
      url.hash = `lines-${options.lineNumber}`;
    } else {
      url.hash = `${options.lineNumber}`;
    }
    return url.toString();
  }
  resolveEditUrl(url) {
    const urlData = parseGitUrl(url);
    const editUrl = new URL(url);
    editUrl.searchParams.set("mode", "edit");
    editUrl.searchParams.set("spa", "0");
    editUrl.searchParams.set("at", urlData.ref);
    return editUrl.toString();
  }
};
__publicField(_BitbucketIntegration, "factory", ({
  config
}) => {
  var _a, _b, _c;
  const configs = readBitbucketIntegrationConfigs(
    (_c = config.getOptionalConfigArray("integrations.bitbucket")) != null ? _c : [
      // if integrations.bitbucket was not used assume the use was migrated to the new configs
      // and backport for the deprecated integration to be usable for other parts of the system
      // until these got migrated
      ...(_a = config.getOptionalConfigArray("integrations.bitbucketCloud")) != null ? _a : [],
      ...(_b = config.getOptionalConfigArray("integrations.bitbucketServer")) != null ? _b : []
    ]
  );
  return basicIntegrations(
    configs.map((c) => new _BitbucketIntegration(c)),
    (i) => i.config.host
  );
});
let BitbucketIntegration = _BitbucketIntegration;

export { BitbucketIntegration };
//# sourceMappingURL=BitbucketIntegration.esm.js.map
