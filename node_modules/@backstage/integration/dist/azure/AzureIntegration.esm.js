import { basicIntegrations, isValidUrl } from '../helpers.esm.js';
import { AzureUrl } from './AzureUrl.esm.js';
import { readAzureIntegrationConfigs } from './config.esm.js';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, key + "" , value);
  return value;
};
const _AzureIntegration = class _AzureIntegration {
  constructor(integrationConfig) {
    this.integrationConfig = integrationConfig;
  }
  get type() {
    return "azure";
  }
  get title() {
    return this.integrationConfig.host;
  }
  get config() {
    return this.integrationConfig;
  }
  /*
   * Azure repo URLs on the form with a `path` query param are treated specially.
   *
   * Example base URL: https://dev.azure.com/organization/project/_git/repository?path=%2Fcatalog-info.yaml
   */
  resolveUrl(options) {
    var _a;
    const { url, base } = options;
    if (isValidUrl(url)) {
      return url;
    }
    try {
      const azureUrl = AzureUrl.fromRepoUrl(base);
      const newUrl = new URL(base);
      const mockBaseUrl = new URL(`https://a.com${(_a = azureUrl.getPath()) != null ? _a : ""}`);
      const updatedPath = new URL(url, mockBaseUrl).pathname;
      newUrl.searchParams.set("path", updatedPath);
      if (options.lineNumber) {
        newUrl.searchParams.set("line", String(options.lineNumber));
        newUrl.searchParams.set("lineEnd", String(options.lineNumber + 1));
        newUrl.searchParams.set("lineStartColumn", "1");
        newUrl.searchParams.set("lineEndColumn", "1");
      }
      return newUrl.toString();
    } catch {
      return new URL(url, base).toString();
    }
  }
  resolveEditUrl(url) {
    return url;
  }
};
__publicField(_AzureIntegration, "factory", ({ config }) => {
  var _a;
  const configs = readAzureIntegrationConfigs(
    (_a = config.getOptionalConfigArray("integrations.azure")) != null ? _a : []
  );
  return basicIntegrations(
    configs.map((c) => new _AzureIntegration(c)),
    (i) => i.config.host
  );
});
let AzureIntegration = _AzureIntegration;

export { AzureIntegration };
//# sourceMappingURL=AzureIntegration.esm.js.map
