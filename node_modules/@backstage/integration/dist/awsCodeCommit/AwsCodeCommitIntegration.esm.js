import { basicIntegrations, defaultScmResolveUrl } from '../helpers.esm.js';
import { readAwsCodeCommitIntegrationConfigs } from './config.esm.js';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, key + "" , value);
  return value;
};
const _AwsCodeCommitIntegration = class _AwsCodeCommitIntegration {
  constructor(integrationConfig) {
    this.integrationConfig = integrationConfig;
  }
  get type() {
    return "awsCodeCommit";
  }
  get config() {
    return this.integrationConfig;
  }
  get title() {
    return this.integrationConfig.host;
  }
  resolveUrl(options) {
    const resolved = defaultScmResolveUrl(options);
    return resolved;
  }
  resolveEditUrl(url) {
    const parsedUrl = new URL(url);
    const pathMatch = parsedUrl.pathname.match(
      /^\/codesuite\/codecommit\/repositories\/([^\/]+)\//
    );
    if (!pathMatch) {
      throw new Error(``);
    }
    const [, repositoryName] = pathMatch;
    return replaceCodeCommitUrlType(url, repositoryName);
  }
};
__publicField(_AwsCodeCommitIntegration, "factory", ({
  config
}) => {
  var _a;
  const configs = readAwsCodeCommitIntegrationConfigs(
    (_a = config.getOptionalConfigArray("integrations.awsCodeCommit")) != null ? _a : []
  );
  return basicIntegrations(
    configs.map((c) => new _AwsCodeCommitIntegration(c)),
    (i) => i.config.host
  );
});
let AwsCodeCommitIntegration = _AwsCodeCommitIntegration;
function replaceCodeCommitUrlType(url, repositoryName, type) {
  const newString = `files/edit` ;
  return url.replace(
    new RegExp(
      `/codesuite/codecommit/repositories/${repositoryName}/(browse|files/edit)/`
    ),
    `/codesuite/codecommit/repositories/${repositoryName}/${newString}/`
  );
}

export { AwsCodeCommitIntegration, replaceCodeCommitUrlType };
//# sourceMappingURL=AwsCodeCommitIntegration.esm.js.map
