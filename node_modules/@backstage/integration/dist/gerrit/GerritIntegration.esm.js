import { basicIntegrations } from '../helpers.esm.js';
import { readGerritIntegrationConfigs } from './config.esm.js';
import { parseGerritGitilesUrl, buildGerritGitilesUrl } from './core.esm.js';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, key + "" , value);
  return value;
};
const _GerritIntegration = class _GerritIntegration {
  constructor(integrationConfig) {
    this.integrationConfig = integrationConfig;
  }
  get type() {
    return "gerrit";
  }
  get title() {
    return this.integrationConfig.host;
  }
  get config() {
    return this.integrationConfig;
  }
  resolveUrl(options) {
    const { url, base, lineNumber } = options;
    let updated;
    if (url.startsWith("/")) {
      const { branch, project } = parseGerritGitilesUrl(this.config, base);
      return buildGerritGitilesUrl(this.config, project, branch, url);
    }
    if (url) {
      updated = new URL(url, base);
    } else {
      updated = new URL(base);
    }
    if (lineNumber) {
      updated.hash = lineNumber.toString();
    }
    return updated.toString();
  }
  resolveEditUrl(url) {
    return url;
  }
};
__publicField(_GerritIntegration, "factory", ({ config }) => {
  var _a;
  const configs = readGerritIntegrationConfigs(
    (_a = config.getOptionalConfigArray("integrations.gerrit")) != null ? _a : []
  );
  return basicIntegrations(
    configs.map((c) => new _GerritIntegration(c)),
    (i) => i.config.host
  );
});
let GerritIntegration = _GerritIntegration;

export { GerritIntegration };
//# sourceMappingURL=GerritIntegration.esm.js.map
